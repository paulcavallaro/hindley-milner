Algorithm W

expr :=
  (VAR) x
  (LET) let x = expr_1 in expr_2
  (APP) expr_1 expr_2
  (ABS) lambda x . expr_1
  (PRIM) <int>
  (PLUS) expr_1 + expr_2

type_variables := α
prim_types := ι

types (τ) :=
  (TYVAR) α
  (TPRIM) ι
  (ARROW) τ -> τ

"poly type"
type-schemes (σ) :=
  (TYPE) τ
  (FORALL) ∀ (GENERIC TYVAR) α . (TYPE-SCHEME) σ

"mono type" is a type w/o any type variables

Type Instantiation

substitution :=
  (S) [τi/αi]

Sσ = [τi/αi]σ :=
  Replace free occurrences of αi with τi

example

S = [τ1/α1 ; τ2/α2]
σ = ∀ α1 . α2 -> α1
S σ = ∀ α1 . τ2 -> α1
because α1 is bound while α2 is not



Generalization

The closure of a type τ w.r.t. Assumptions A is
A_hat(τ)=∀α1,...,αn . τ
where α1,...,αn are the type variables free in τ but not in A

What this allows is for the let expression to derive the most generic type

example

let x = lambda hd . lambda tl . cons hd tl in
x 5 []

could derive either
  x :: int -> int list -> int list
  x :: 'a -> 'a list -> 'a list

Without generalization we would derive the first, and not the second.

To see why, let's walk through the algorithm:

First we encounter the let rule:
let x = e1 in e2 then
W(A, e1) = (S1, t1) and
W(S1Ax Union {x : S1A_hat(t1)}, e2) = (S2, t2)

NOTE: Ax is A with all assumptions about 'x' removed. This is necessary
because we want the new 'x' to be truly fresh.

Algorithm W Examples

[[ 1 ]]
<<<

let e = 5 in
e

>>>

let rule: <let x = e_1 in e_2>
W(A, e_1) = (S_1, t_1) =>
W(A, 5) = (S_1, t_1) =>

W(A, e) = (S, t) where
var rule: <x>
if e is x and there is an assumption x : Forall alpha_1, ... alpha_n . t' in A
then S = Identity, t = <int>

back to let rule
W(A, 5) = (S_1 = Identity, t_1 = <int>)
W(S_1 Ax ∪ {x:(S_1A)_hat(τ1)}, e_2)= (S_2,τ_2) => |- S_1 = Identity, e_2 = 'e'
W(Ax ∪ {e:A_hat(τ_1)}, 'e') = (S_2, t_2) => A_hat(<int>) = <int>
W(Ax ∪ {e:<int>}, 'e') = (S_2, t_2)

apply var rule: <x>
In our case, S = Identity, t = <int>

So back to let rule finally:
S_2 = Identity
t_2 = <int>

then S = S_2S_1 and τ = τ2.
S = Identity t = <int>


[[ 2 ]]
<<<

let one = lambda x . 1 in
let num = one 5 in
one num

>>>

let rule: <let x = e_1 in e_2>
W(A, e_1) = (S_1, t_1) =>
W(A, 'lambda x . 1') = (S_1, t_1) =>

lambda rule: <lambda x . e_1>
W(A, <lambda x . e_1>) = (S, t)
B = fresh type variable
W(Ax ∪ {x: B}, e_1) = (S_1, t_1)
then S = S_1, t = S_1B -> t_1

W(Ax ∪ {x: B}, e_1) = (S_1, t_1)
=>




x : 10
var1 : forall x. x -> x
var1

->

x : 10
var1 : forall x. x -> x
var1 : forall y. y -> y
